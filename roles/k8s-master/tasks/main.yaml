---
- name: init kubeadm
  command: kubeadm init --pod-network-cidr "10.244.0.0/16"  --apiserver-cert-extra-sans=192.168.1.100
  when: kubeAdmReset
  notify: Restart containerd


- name: Get master token
  # command: kubeadm token create # --print-join-command
  command: kubeadm --kubeconfig /etc/kubernetes/admin.conf token list -o jsonpath='{.token}'
  register: k8sMasterToken
  until: "k8sMasterToken is not failed"
  retries: 20
  delay: 10


- name: Get master CA
  shell: |
    openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey |
    openssl rsa -pubin -outform DER 2>/dev/null |
    sha256sum | cut -d ' ' -f1
  register: k8sMasterCa



- name: Calico CNI
  block:
  - fail:
      msg: No ARMv7 images for Calico
  - name: Tigera Operator
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  - name: Calico Config
    command:
      cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f -
      stdin: "{{ calico.config | to_nice_yaml(indent=2) }}"
  when: cni == 'calico'

- name: Weave CNI
  block:
  - name: k8s version
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf version
    register: k8sVersion

  # Weave does not work with error illegal instruction core dump
  # After failures with weave there are old IP tables (legacy not nft) entries left on nodes
  # Perhaps this is causing the issues with using Weave. So have added extra code to clear out
  # iptables and iptables-nft
  - fail:
      msg: Illegal instruction core dump when running Weave

  - name: Install Weave Net network driver
    command: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://cloud.weave.works/k8s/net?k8s-version={{ k8sVersion.stdout | b64encode }}"

  when: cni == 'weave'

- name: Flannel CNI
  command: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  when: cni == 'flannel'


- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    daemon_reload: yes

- name: Wait for node to be ready
  become: yes
  ansible.builtin.shell: $([[ $(kubectl --kubeconfig /etc/kubernetes/admin.conf get node $(cat /etc/hostname) -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}') == "True" ]])
  args:
    executable: /bin/bash
  register: kubelet_ready
  until: kubelet_ready.rc == 0
  retries: 60
  delay: 3






  # - name: Write CRD
  #   shell:
  #     cmd: cat >> /tmp/monkey.yaml
  #     stdin: "{{ metallb.crd }}"


  # - name: Install CRD
  #   shell:
  #     cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f -
  #     stdin: "{{ metallb.crd }}"
    # register: installCrd
    # until: "installCrd is not failed"
    # retries: 20
    # delay: 10

  # - name: Install CRD - IPAddressPool
  #   command:
  #     cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f -
  #     stdin: "{{ metallb.crds.ipaddresspool | to_nice_yaml(indent=2) }}"

  # - name: Install CRD - L2Advertisement
  #   command:
  #     cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f -
  #     stdin: "{{ metallb.crds.l2advertisement | to_nice_yaml(indent=2) }}"


- name: Read kubeconfig
  command: cat /etc/kubernetes/admin.conf
  register: kubeconfigCat

- name: Kubernetes master token
  set_fact:
    k8sMasterToken: "{{ k8sMasterToken.stdout }}"
    k8sMasterCa: "{{ k8sMasterCa.stdout }}"
    kubeconfig: "{{ kubeconfigCat.stdout }}"
  notify:
  - Metallb Install
  - Traefik Install
