---
- name: init kubeadm
  command: kubeadm init --pod-network-cidr "10.244.0.0/16"  --apiserver-cert-extra-sans=192.168.1.100
  when: kubeAdmReset

- name: Get master token
  # command: kubeadm token create # --print-join-command
  command: kubeadm --kubeconfig /etc/kubernetes/admin.conf token list -o jsonpath='{.token}'
  register: k8sMasterToken
  until: "k8sMasterToken is not failed"
  retries: 20
  delay: 10


- name: Get master CA
  shell: |
    openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey |
    openssl rsa -pubin -outform DER 2>/dev/null |
    sha256sum | cut -d ' ' -f1
  register: k8sMasterCa


- name: Calico CNI
  block:
  - fail:
      msg: No ARMv7 images for Calico
  - name: Tigera Operator
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  - name: Calico Config
    command:
      cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f -
      stdin: "{{ calico.config | to_nice_yaml(indent=2) }}"
  when: cni == 'calico'

- name: Weave CNI
  block:
  - name: k8s version
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf version
    register: k8sVersion

  # Weave does not work with error illegal instruction core dump
  # After failures with weave there are old IP tables (legacy not nft) entries left on nodes
  # Perhaps this is causing the issues with using Weave. So have added extra code to clear out
  # iptables and iptables-nft
  - fail:
      msg: Illegal instruction core dump when running Weave

  - name: Install Weave Net network driver
    command: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://cloud.weave.works/k8s/net?k8s-version={{ k8sVersion.stdout | b64encode }}"

  when: cni == 'weave'

- name: Flannel CNI
  command: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  when: cni == 'flannel'


- name: Metallb
  block:
  # - name: Create namespace
  #   command: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb.version }}/config/manifests/metallb-native.yaml"

  - name: Set kube-proxy strictARP
    shell: >-
      kubectl --kubeconfig /etc/kubernetes/admin.conf get configmap kube-proxy -n kube-system -o yaml |
      sed -e "s/strictARP: false/strictARP: true/" |
      kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f - -n kube-system

  - name: Install
    command: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb.version }}/config/manifests/metallb-native.yaml"

  - name: Create Secret
    command: openssl rand -base64 128
    register: metallbSecret

  - name: Install Secret
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf create secret generic -n metallb-system memberlist --from-literal=secretkey="{{ metallbSecret.stdout }}"

  - name: Install CRDs
    command:
      cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f -
      stdin: "{{ metallb.crd | to_nice_yaml(indent=2) }}"

- name: Traefik
  block:
  - name: Traefik helm repo
    command: "{{ item }}"
    with_items:
      - kubectl --kubeconfig /etc/kubernetes/admin.conf create namespace traefik-system
      - helm repo add traefik https://helm.traefik.io/traefik
      - helm repo update
      - helm --kubeconfig /etc/kubernetes/admin.conf -n traefik-system upgrade -i traefik traefik/traefik
  - name: Traefik dashboard
    command: kubectl --kubeconfig /etc/kubernetes/admin.conf -n traefik-system apply -f -
    args:
      stdin: "{{ traefik.config | to_nice_yaml(indent=2) }}"

- name: Read kubeconfig
  command: cat /etc/kubernetes/admin.conf
  register: kubeconfigCat

- name: Kubernetes master token
  set_fact:
    k8sMasterToken: "{{ k8sMasterToken.stdout }}"
    k8sMasterCa: "{{ k8sMasterCa.stdout }}"
    kubeconfig: "{{ kubeconfigCat.stdout }}"
